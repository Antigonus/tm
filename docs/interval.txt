
An interval space is a set of contiguous cells that belong to another space. This other
space is a substrate upon which the interval is built.  Thus, like all cells in the
interval, the leftmost cell of the interval will also be a cell on the substrate, though
not necessarily the leftmost cell of the substrate.  An analogous situation exists for the
rightmost cell.

We define a 'transform' as a tape machine that uses as its tape, another tape machine.
The functional interface of transform machine then typically provides a different behavior
than the base machine would if used directly. It follows from this definition that
tm-interval is a transform tape machine, where the substrate we speak of above is the base
we speak of with transforms.

We might think of an interval as a sort of 'super cell'.

We init an interval with a base machine, the head location on the base machine
is taken as the location of the interval.  The interval lies to the right of this
cell the head is on.  Then we provide one of either :mount for allocating a new
interval, or :rightmost for gathering existing cells from the tape.  

As an interval is a tape machine, quantified functions can be used as for other machines.
As examples:

Repeat allocate can create an allocation and copy an interval.

  (a* tm0 fill cont-ok, cont-no-alloc)

When the fill machine is an interval, a number of cells sufficient for holding
the interval are allocated, and the objects are shallow copied over.  When tm0 
is an empty interval, then it will become a copy of the fill interval.  When
tm0 is not empty, it may be unclear after the copy as to where the newly created
copy region ends.  If using as*, the head of tm0 is left on the last cell of the
newly allocated region.

  (d* tm-interval spill cont-rightmost cont-no-alloc)

deallocates an interval




