

2. access lang needs to be finished, also chapter needs to be added
to the manual.

expand access lang

4. need to write mn and m* as repeating m is very inefficient

6. binner is commented out in worker-utilities, due to a change before
the last release

7. right now tm-difference-engine is only linear, need to finish implementation
   tm-line -> tm-difference-engine .. will rename it tm-sums
   (really it sums a finite difference to recover the original sequence)

8. ... need tm on a stream, also the utf8 converters --> tm needs to re

10. should modify #'L, i.e. {},  to recognize repeated symbols and only evaluate
    them once.  This could be done by wrapping the current #'L with a let.

    wonder, .. square brackets to make machines  and curly for lists?
    or square brackets for vectors ...  quote ... really?

11. need to add name spaces for test-hook, and then have (test-all) run everything
independent of the names space, and (test-all 'space) to run only the given name
space. also if one runs load twice all the tests double up.  something should
be done so that only the most recent version plays.

13. removed the affine versions, need to add an affine transform, when
passed a projective machine, turns it into an affine one.  .. the old
affine machine are sitting in scratch

22. no-alloc continuations need to be implemented

23. add somethign to the manual about functional programming (state machines),  state
variables,  and transactional behavior for tm functions (so that state doesn't change
when state transitions are not taken) .. about region and cell addresses, note
copy to new list doe snot have the problem and it is also transactional

29. some sort of issue with mount and subspaces ... should descend into subspaces (not leave any tms)

    ...add a manifold machine type, note the comments currently in tm-region.lisp.

    note doc on subspaces, pulled them out, need to be reimplemented

32.
  ;; behavior is not transactional, all machines update even when one or more cont-not-supported
  ;; need to check support first
  (defun ∀-entanglements-d◧-0 (tm cont-ok cont-not-supported)

  all api functions should either be transactional or return state for continuing
  .. I don't think we quite have that yet

33. change the quantifiers so that the first parms are optional, the first parm is
   the object, and the second is the machine .. there is something a little funny
   about passing the list into the predicate, as usually we already have the list,
   hence would just like to leave the predicate without parms ... but sometimes
   the list is created with an expression, so then it is useful to have it passed
   in.  Most predicates don't need the list, they just want the read object.
   key parms?


35. init should fail if there are unused keys. init functions that 'call-next-method'
  need to renove their keys, so that the more general init can detect unused
  keys.  (wrote remove key, it is in src0)

36. test           + TEST-META-WRAP-0   fails after being run multiple times ...

37. scoped form of mk.  See implementation/status.txt

38. split, split machine in half

39. moved r◧, w◧ from nd-tm to tm. Added some other left of the tape operators, and one
next to the left of tape operators.  Need to propagate these through to the transforms.
Also, do the quantified ops need to be propagated into, at least, the identity transform.

40. breakup/breakout ea-entanglment routines into eather ea-decl or ea-generic

41. nil write on d&parked&length-one -- should make empty be a machine specific routine?

42. esw rightmost continuation should take the instance as an operand
