1. fixed array implementation needs to be finished

2. access lang needs to be finished, also chapter needs to be added
to the manual.

3. expand access lang

4. need to write mn and m* as repeating m is very inefficient

7. right now tm-difference-engine is only linear, need to finish implementation
   tm-line -> tm-difference-engine .. will rename it tm-sums
   (really it sums a finite difference to recover the original sequence)

10. should modify #'L, i.e. {},  to recognize repeated symbols and only evaluate
    them once.  This could be done by wrapping the current #'L with a let.

    also nested brackets should return a nested list instead of quoting the
    bracket operator
       currently->  [1 2 [3 4]] ->  (1 2 (q 3 4))
         want-> [1 2 [3 4]]  -> (1 2 (3 4))

     braces will do this  {1 2 {3 4}} -> {1 2 {3 4}}, but they evaluate

11. need to add name spaces for test-hook, and then have (test-all) run everything
independent of the names space, and (test-all 'space) to run only the given name
space

12. return values for some of the tape ops needs to be thought through and made
consistent.  E.g. cue-leftmost in the doc string says it returns the original
tape machine, yet most functions return true when they successfully operate
on state.  And, in addition, currently some of the cue-leftmost implementations
return t, rather than tm.  

.. if we return true from cue-leftmost, that implies
that there might be an implementation that returns false, which means that
we should be testing the return value - which means that we should instead
of continuations to be consistent with the rest of our lambda calculus style
approach to conditions.  I.e. cue-leftmost should be taking continuations
and returning nothing (to be consistent with access to state variables),
.. return tm for convenience?

