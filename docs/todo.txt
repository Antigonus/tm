

2. access lang needs to be finished, also chapter needs to be added
to the manual.

expand access lang

4. need to write mn and m* as repeating m is very inefficient

6. binner is commented out in worker-utilities, due to a change before
the last release

7. right now tm-difference-engine is only linear, need to finish implementation
   tm-line -> tm-difference-engine .. will rename it tm-sums
   (really it sums a finite difference to recover the original sequence)

8. ... need tm on a stream, also the utf8 converters --> tm needs to re

10. should modify #'L, i.e. {},  to recognize repeated symbols and only evaluate
    them once.  This could be done by wrapping the current #'L with a let.


11. need to add name spaces for test-hook, and then have (test-all) run everything
independent of the names space, and (test-all 'space) to run only the given name
space

12. return values for some of the tape ops needs to be thought through and made
consistent.  E.g. cue-leftmost in the doc string says it returns the original
tape machine, yet most functions return true when they successfully operate
on state.  And, in addition, currently some of the cue-leftmost implementations
return t, rather than tm.  

.. if we return true from cue-leftmost, that implies
that there might be an implementation that returns false, which means that
we should be testing the return value - which means that we should instead
of continuations to be consistent with the rest of our lambda calculus style
approach to conditions.  I.e. cue-leftmost should be taking continuations
and returning nothing (to be consistent with access to state variables),
.. return tm for convenience?

13. removed the affine versions, need to add an affine transform, when
passed a projective machine, turns it into an affine one.  .. the old
affine machine are sitting in scratch

14.  The test-meta-unwrap test often fails after a debug session, yet the definition when
 run by itself passes, so I'm guessing it is a namespace issue with 'o'.  It is defined in
 tm, but not sure compares are always in tm.

15.  Change the generators must go void when they are empty.

16. unmount of void is a little funny, it is dispatched from type tm-void, but
then must determine how to make various void object ...  perhaps
the fall of the end case should just return nil, should this somehow dispatch
so folks can define their nil sequence cases?

17. add exception unwind handling on routines that modify tms in the library,
so that tms are never left in intermediate states.

*18.  deallocate leftmost in tm-derived would be more useful if  type-of returned
enough information for rebuilding the object (intervals need bounds, arrays size, etc.)
or if some other mechanism got that information in place.

19 tm-interval limits are currently not checked to be void

20. weak pointers on the entanglement list

21. update cue-to and dup to dispatched methods as otherwise regions won't dup.  finish
entanglements.lisp and replace current calls to entangled - as that applies to tapes not
cells.

22. #'a need to expand out cont-no-alloc to the two cases rightmost and not-supported

23. add somethign to the manual about functional programming (state machines),  state
variables,  and transactional behavior for tm functions (so that state doesn't change
when state transitions are not taken) .. about region and cell addresses, note
copy to new list doe snot have the problem and it is also transactional

24. the cont-no-alloc on #'a is actaully cont-not-supported,  there should also
be a cont-no-alloc continuation for when heap allocation fails.

25. change âˆƒ to generic method so that we can dispatch the weak version with
clean up.

26. need to add cont-void-access to read and write

27. add r-address to read a cell by address - what happens to the address space
when a cell is deallocated?  do cells get new addresses?  or keep the old ones?

28. transforms, tm-depth, tm-breadth .. what is there parked and void and back
behavior .. currently tm-depth and tm-breadth can not be parked or voided.


