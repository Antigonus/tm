

Tape machines are passed by reference, hence we can change them inside a function and
expect these changes to be reflected in all references to the machine.  Now if we require
that a tape machine be made with at least one element, then tape machines that capture
results can not be created until at least one result is produced.

Now suppose that a function is producing results has a tape machine parameter, what
do we pass as this parameter?  If we have produced prior results, then the parameter
can be the tape machine, but what if we have not produced prior results?

Suppose as a place holder we pass in ∅.  The production function will check the parameter
before producing each result, and if it sees the paramater is ∅, it creates the tape
machine and then produces the result to be placed in the machine.  But we have a problem
as we have no way of getting the new machine out of the function.

Suppose we did have a method for getting the new production machine out of the function,
we have still forced the program to check for a null machine on every single use of
the machine where there might be a question that it is the first use.

We can relieve the programmer user of this duty by keeping an 'empty machine' flag in the
machine.  Then also we do not have to deal with the problem of passing in ∅ that can not
reflect changes back out, but instead can pass in the empty machine.  Furthermore
we can move the end case testing into dispatch, by making the 'empty machine' flag
a state variable that affects which function gets called based on its value.

There was an initial C++ implementation that used a state variable to direct dispatch.  In
the CLOS implementation I initially tried to create void as a type, and then to embedd
information as to the type machine to transition to one an object was added within one of
the unused slots.  However, this inconsistent use of slots caught up with me when I
started implementing higher order types, such as the region.  Consequently I have moved to
a state model in the CLOS implementation also.  This has relieved the code from a number
of complexities.

It was tempting to break the tape machine into two parts: a tape transport, and a head
assembly; i.e. a container and an iterator.  However, this meant that both required state
variables, and it created the possibility of inconsitent state between the two, as a void
tape implied the head could not have state referencing a cell on the tape, so it to has to
be in a special state.  However, by keeping them together, we end up having to use the
entanglement list for updating fields.  Had the tape transport been shared, changes to the
tape would automatically be reflected into the tape slot of every head assembly.  However,
sharing meant that we didn't tell the head assemblies about changes, and as some of those
may be abstract, i.e. it is not just fields that need be updated, so this introduced
problems.  The original concept of a listener list (which became the entanglements
list) is better, as then all entangled machines are informed of changes of state.

