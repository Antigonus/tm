
Transforms are machines that wrap other machines.  The machine being wrapped is called
the 'base' machine, and it is given a slot in the transform machine.

A simple example is the affine transform, which keeps a slot pointing at a projective
machine.  Most operations are passed to the projective machine.  When there is a right of
bound-right error, then the wrapper does a cue-bound-left on the machine, and does not pass
the error to the caller.

A transform is similar to inheritance and specialization.  The affine transform, for
example, could have inherited from the base machine, and then provided specialized
interface functions.

There are at least two good reasons to use a transform instead of inheritance.  1) there
are many tape machine types.  The transform will work on all or some subset of one.  Had a
programmer had instead done inheritance, then he/she would have to in advance select the
machines ever to be transformed, and inherit from them.  2) CLOS dispatch always picks the
most specialized version of a function, even inside the implementation of functions for a
specialization, so when working with the less specialized part of the type, it is not
possible to access the functions dedicated for working on that part.  With a slot, the
machine in the slot maintains its type, so we can operate on it appropriately with
the new interface getting in the way.

