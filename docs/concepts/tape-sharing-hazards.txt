
When multiple machines share a tape, we say they are entangled.  There are hazards when
mulitple machine share a tape.  These hazards occur when:

  2.1 deleting a cell
  2.2 changing the reference to the tape

If one machine deletes a cell that another machine has its head on, the other machine
loses its integrity.  By loss of integrity, we mean that calling operations on its
interface may not produce the behavior specified for those operations.

If one machine changes out the tape, the entangled machines won't know this.  The behavior
of these machines will then diverge.

Had tape machines been defined to keep a reference to the tape reference, rather than a
just a reference to the tape, then 2.2. could have been relaxed.  A reference to
a reference is similar to using one cell of padding; hence, all operations that start at
the beginning of a tape would pay an overhead to skip the extra reference, and thus would
also need extra code just for this case.  This might not have been so bad, as it could
have been built into cue-leftmost.

One approach to avoiding these hazards is to keep a set of references to the entanglemed
machines and then 1) to check for collisions before deleting a cell, and 2) to update
all the tape references if one machine changes its reference.  We call this 'entanglment
accounting'.

Another approach to avoiding these hazards is to simply not allow operations that
would cause them.  We call this 'non-destructive' programming.

With entanglement accounting, or with non-destructive programming, it is safe to
allow multiple machines to share a tape.
