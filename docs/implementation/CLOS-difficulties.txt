
1. When inheriting a 'super' class into a 'subclass' to create a 'specialization' the
interface of the super class is not available to subclass code for the parts that are
specialized, with only one except, a function called 'call-next-method', but
call next method will only call the X version of the same name as the Y version.

In other words, if I have an object type X, and I want to create a specialization Y, the
code for Y can not use the X interface to manipulate the X part of the specialization - when
Y defines a function of the same name as does X.

In ohter words, if I have a function class X,  and I want to specialize by adding further
functions to the class, to create Y which is a specialiation of X, then my functions
which in Y which specialize functions in X, are arbitrarily denied access to the more
general X class versions.

My solution has been to, instead of inheriting, make a new type, say Y, and assign to that
type a slot for holding an X.  I then duplicate the whole of the X interface over Y so
that it can look like an X.  However, this approach has serious short comming -- CLOS
dispatch will not recognize Y as a specialization of X.

..call next method only works when that method has the same name, and only when next
method is needed. Not possible are simple co-routine relationships,  where say,  x->y
and y->x   (child to parent).

The advantage of using a slot for an object instead of inheritance, is that hides the
formatting for that object.  If we had inherited, we would get the objects slots.
Now we have to use that objects formatting.  If we assign to a slot, now we are
using the object in an archtiectural manner.  Its formatting is irrelavant, and can
even change should we assign another object with the same architecture to the same
slot.  But this issue is more general, it does seem that if I'm going to inherit
formatting, I should be able to use the routines designed for using it.  There seems
to be some architecture/implementation confusion in CLOS.

=> As an example.  If we inherit a list tape into a tape machine, then we have to create a
specialized list tape machine, because we have to deal with the specifics of the list tape
implementation (the names of types of its slots, that are now inherited).  However, if we
make a slot for a tape, and put a list tape there, then using that slot invokes the
architectural implementation for the tape, which is common to all tapes. Then we
can write one generic tape machine for all tape implementations. .. though as it turns
out this is an ideal, as not all tape implemenations can implement the whole tape
architecture.  Hence, we might still have specialized tape machines, but most of the
specialized tape machine can inherit from the generic one.  Only in cases we run
into limitations of a tape type do we need to specialize the tape machine.


2  flipping that over, here is another interesting observation, I have a compatible
interface, but different implementations.  These different implemenations are not related
through inheritance.  However I don't care about the implemantation, it is the interface
that matters.  However, a function that uses one interface can not be called with
objects of typed to use the other interface.  There is a conflation of two different
concepts -- that of data formatting, and that of abstract data type.  Two different
formats can have different formats, but have the same abstract type.  CLOS forces a
binding between data format and abstract type.  .. note for format and abstract
data type to be seprate, functions can not mix abstract data type calls and formatting
type calls - i.e. can not access slots directly -- all access must be through the
interface.  Though we can put on the interface calls that perform the same function
as the format type calls, it is just that they might not have anything to do with format.

** I have gotten around this problem by defining slotless architectural types, and keeping
these distinct from implemented types,  then when arguments are typed on the function
call interface e.g. ... (x number) ..  we use the architectual type as a specifier,
not an implementation type.   Our architectural types of spelled out suffices, .e.g.
'tape-machine', while our implementations have abreviated suffixes such as 'tm'.

.. thus we can distinuish architecture (abstract type, interface) from implementation by
the existence of slots.  Thus the implementation type slot accessors should be used through
iterface functions, and not directly - as another implementation of the same architecture
might not have such slots.  .. actaually the :accessor keywords allow us to create
functions of the correct form - if the slot disappears we can add a function back to
maintain the architecture.

;;
this says that a typed function written to take an argument of an solo-tape-machine
or that of an nd-tape-machine, will also accept an argument of type haz-tape-machine.

  (def-type haz-tape-machine (solo-tape-machine nd-tape-machine)())

where as this says that the data format of an instance of list-haz-tm is a composite
of the formats for list-solo-tm and list-nd-tm:

  (def-type list-haz-tm (haz-tape-machine list-solo-tm list-nd-tm)())

These are two very different statements.  The first one speaks to architecture (aka
interface definition, aka abstract data type) while the second speaks to actual
format of data in memory (aka implementation).

.. should add a macro def-interface  to be used in place of def-type when defining
the interface.  We drop the option of having slots:

  (def-abstract-type haz-tape-machine (solo-tape-machine nd-tape-machine))
  (def-format-type list-haz-tm (haz-tape-machine list-solo-tm list-nd-tm)())

or perhaps

  (def-interface haz-tape-machine (solo-tape-machine nd-tape-machine))
  (def-implementation list-haz-tm (haz-tape-machine list-solo-tm list-nd-tm)())


Then all defun-typed functions use interface specifiers.  Mk calls use implementations.

3. defgeneric does not allow the definition of optional values on arguments that are
common to all methods.  We can get around this by having a function, say f, with optional
argument defaults defined, that then in turn calls a generic, say f-0.

4. dispatch is only on the class type of the argument.  Many people have noted that
general popositions related to type would be useful.  Here we want dispatch based on
the value of a state variable.  To force this to happen, we use type to hold the state
value.  (type-of state) : one of 'void 'parked 'active.  

5. aliasing of interface function names across classes of different types, but can
only have one type signature.  So we a function called 'empty'  for tape
machines.  It calls empty-0 while adding (state tm), as per points 3 and 4 above.
In addition we have a buffers stack and queue.  It is natural to ask if the buffer
is empty with, say,  (empty buff0),  but as buffers do not have state, and thus goes to
a funciton to supply the optional defaults, it will fail when (state buff0) is called.
In general we might want widly different argument lists for a method with the same
name that is disptached from different class types, but CLOS won't let us.

6. two siblings both want to have a new generic function with the same name and signature.
there is no-where to put the declaration.  If I put it in the parent, then the parent
is responsible for knowing what will be implemented in children.  I don't like this
as only parent stuff belongs in the parent.  If I put the declaration in one of the
children, but not the other, then it appars to be missing in the other file.  I have
to go hunting for it ...   this is related to the aliasing problem - if it were not for
aliasing I could just declare it in both children.

7. Want to test the generic interface implementation though we have a more specific
list implemenation.  Currently we have no other implementations, and we need at least
one real implementation for a test to run.  There appears no way short of tearing into
CLOS to tell it to use the generic interface version.

..
diamond inheritance, how to direct call-next-method

8. another example where calling the parent (more general) methods would be useful, but we
can't.  In ts1 we simply add a lock to the more general ea version.  Inside the method
'clean-entanglements' calls are made to simpler interface routines.  When these call back
into ts1, they attempt to set the lock again.  Hence we have had to use a recusive lock.
If instead we could tell CLOS to do parent function work inside the parent function then
we would not need the recursive lock.  This could be done in two ways, either when we call
next method, we tell close to treat the type as the more general type, everywhere.  Or
secondly, we could reproduce 'clean-entanglements' and inside it explicitly make calls
to the more general function versions (something we can not do now).

9.

(defun-typed dispatch-project ((p project) 

would like to drop '-project'  from the function name.  It appears to be redundant
as p is qualified on project.  However, all functions in a function class must
have the same number of arguments and &option form, etc.  Hence, dispatch for other
than project might collide with this.  But if I add the '-project'  I am creating
a namespace for project functions, and don't really need the type qualification.

10.

no union of types for type specifier

a kludge to get around this .. say we want a union called 'tape'.  We make a type called
tape and to give it slot.  Then we derive different types of tapes, each holding the slot
value of the correct type.

  (def-type tape ()()) ; a union of tape types
  (def-type list-tape (tape)
    (
      (tape ; holds a list-tape type tape
        :initarg :tape
        :accessor tape
        )
      ))

Logically this works well, however I feel bad about the extra level of dereferencing
that occurs at run time. My impression is that there is some non-trivial work
associated with pulling out this slot value, though, there will only ever be a single
value.


11.
namespaces

(max-index parms-instance)  .. calls an accessor function when given the instances, the
instance should have a slot called max-index.  The accessor function was defined
with the type declaration corresponding to the type of the instance.  However,
this max-index will not be on the user interface. It is not imported with the
packages, it just happens to be a slot name.

Now (max-index tape-instance) .. is a user interface function for returning the
maximum index usable in the address space.

The def-type (aka defclass) slot accessors do not live within a namespace defined
by the def-type type name, but rather are at package scope, so they alias against
function names that are part of the interface.  It is a bit of a tall order to
say that none of our slot names will ever be the same as a function name.

In general the namespacing is rather crude.  Two name spaces,  one for functions
one for variables.  The namespace to apply is chosen by syntax analysis in a language
that has almost no syntax..

12.
   (typep ∅ seq)  limits our ability to do boundary calculus. forces the null
   test for seq into guard code instead of having dispatch call a different
   version that handles null

   .. well no not actually as (x null) as a type specifier is more specific than
   (x sequence) as a type specifier, so we can do the boundary calculus.

13.
   CLOS doesn't do instance specific functions. Sort of missing the
   base case of the inheritance hierarchy. An instance specific function
   would have the instance compiled in.  It is for optimization.  In the
   most extreme case, there would just be a cached result for the function
   as prior computed from simple operands.

14

  (defun-typed a<cell> ((c0 cell-bilist) (new-cell cell-bilist))
    (insert<cell> c0 (right-neighbor c0) new-cell)
    )

  (defun-typed a<instance> ((c0 cell-bilist) instance)
    (let(
          (new-cell (make-instance 'cell-bilist :contents instance))
          )
      (insert<cell> c0 (right-neighbor c0) new-cell)  ***
      ))

  *** this should be a call to a<cell>, so as to reduce the maintenance and test burdens,
  and to not have to remember to keep these two in sync, but we dont' do that because
  another trip through the dispatcher would be low performance.  Dispatch is also
  unnecessary as we already typed the inputs.  Seems the compiler should recognize such
  situations and then make a defun version of a<cell> that a<cell> and a<instance> call.
  Evern better in this case if the compiler just dropped in copies of the code.




  
